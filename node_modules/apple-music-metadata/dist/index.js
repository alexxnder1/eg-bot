"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoGetApple = exports.getPlaylist = exports.getSong = exports.fastPlaylist = exports.findJSONLD = void 0;
const axios_1 = __importDefault(require("axios"));
const htmlparser2_1 = require("htmlparser2");
const axios_retry_1 = __importDefault(require("axios-retry"));
const cheerio_1 = __importDefault(require("cheerio"));
// apple will somtimes reject request due to overload this will retry each request up to 5 times
(0, axios_retry_1.default)(axios_1.default, { retries: 5 });
;
/**
 * @param {Document} document
 * @param {boolean} album
 * @returns {Promise<?RawApplePlaylist>}
 */
function findJSONLD(document, album = false, fast = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const scripts = htmlparser2_1.DomUtils.findAll((element) => {
            if (element.type !== "script")
                return false;
            return element.attribs.type === "application/ld+json";
        }, document.children);
        for (const script of scripts) {
            let data = JSON.parse(htmlparser2_1.DomUtils.textContent(script));
            if ("@graph" in data)
                data = data["@graph"];
            if (data["@type"] === "MusicAlbum" && !album) {
                return {
                    artist: data.byArtist.name,
                    album: data.name,
                };
            }
            if (data["@type"] === "MusicAlbum" && album) {
                let { name, byArtist, tracks } = data;
                return {
                    type: "album",
                    name: name,
                    author: byArtist.name,
                    tracks: tracks.map((songData) => {
                        return {
                            artist: byArtist.name,
                            title: songData.name,
                        };
                    }),
                };
            }
            if (data["@type"] === "MusicPlaylist" && fast) {
                let { name, author } = data;
                return {
                    type: "playlist",
                    name: name,
                    author: author.name
                };
            }
            if (data["@type"] === "MusicPlaylist") {
                let { name, author, track } = data;
                return {
                    type: "playlist",
                    name: name,
                    author: author.name,
                    tracks: (yield Promise.all(track.map((songData) => __awaiter(this, void 0, void 0, function* () { return yield getSong(songData.url, true); })))),
                };
            }
        }
    });
}
exports.findJSONLD = findJSONLD;
function fastPlaylist(result) {
    return __awaiter(this, void 0, void 0, function* () {
        let $ = cheerio_1.default.load(result.data), aTitleDivs = $(".songs-list-row__song-name").toArray(), aArtistDivs = $(".songs-list-row__link").toArray(), Playlist = [], i, j = 0;
        for (i = 0; i < aTitleDivs.length; i++) {
            Playlist.push({
                album: aArtistDivs[j + 2].children[0].data,
                artist: aArtistDivs[j].children[0].data,
                title: aTitleDivs[i].children[0].data,
            });
            j += 3;
        }
        return Playlist;
    });
}
exports.fastPlaylist = fastPlaylist;
/**
 * @param {string} url
 * @returns {Promise<RawAppleSong>}
 */
function getSong(url, playlist = false) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield axios_1.default.get(url);
        const document = (0, htmlparser2_1.parseDocument)(result.data);
        const { artist, album } = (yield findJSONLD(document));
        const regexName = RegExp(/https?:\/\/music\.apple\.com\/.+?\/.+?\/(.+?)\//);
        const title = (_a = regexName.exec(url)) === null || _a === void 0 ? void 0 : _a[1];
        const song = {
            artist,
            title,
            album,
        };
        if (playlist === false) {
            song.type = "song";
        }
        return song;
    });
}
exports.getSong = getSong;
/**
 * @param {string} url
 * @returns {Promise<?RawApplePlaylist>}
 */
function getPlaylist(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield axios_1.default.get(url);
        const document = (0, htmlparser2_1.parseDocument)(result.data);
        try {
            const tracks = yield fastPlaylist(result);
            const { type, name, author } = (yield findJSONLD(document, true, true));
            return { type, name, author, tracks };
        }
        catch (error) {
            return (yield findJSONLD(document, true));
        }
    });
}
exports.getPlaylist = getPlaylist;
/**
 * @param {string} url
 * @returns {Promise<Promise<RawApplePlaylist|RawAppleSong|undefined>>}
 */
function autoGetApple(url) {
    return __awaiter(this, void 0, void 0, function* () {
        if (RegExp(/https?:\/\/music\.apple\.com\/.+?\/playlist\//).test(url) ||
            !url.includes("?i=")) {
            return yield getPlaylist(url);
        }
        if (RegExp(/https?:\/\/music\.apple\.com\/.+?\/album\/.+?\/.+?\?i=/).test(url)) {
            return yield getSong(url);
        }
    });
}
exports.autoGetApple = autoGetApple;
